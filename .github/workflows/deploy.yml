name: Deploy TO EC2

on:
  push:
    branches:
      - main

permissions:
  contents: read
env:
  DOCKER_HUB_REPOSITORY: secretsofkitchen-java

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
     - uses: actions/checkout@v3
     - name: Set up JDK 17 설정
       uses: actions/setup-java@v3
       with:
         java-version: '17'
         distribution: 'temurin'

     - name: Gradle 캐싱
       uses: actions/cache@v3
       with:
         path: |
           ~/.gradle/caches
           ~/.gradle/wrapper
         key: ${{ runner.os }}-gradle-${{ hashFiles('**/*gradle*', '**/gradle-wrapper.properties') }}
         restore-keys: |
           ${{ runner.os }}--gradle-

     - name: Gradlew 권환설정
       run: chmod +x ./gradlew
     - name: Gradle 빌드실행
       run: ./gradlew bootJar

     - name: application.yml 수정 실행
       run: |
         echo "APPLICATION" > ./application.yml
         echo "APPLICATION_DEV" > ./application-dev.yml
         echo "password: '${{ secrets.DB_PASSWORD }}'" >> ./application.yml
         echo "APPLICATION_TEST" > ./application-test.yml
       env:
         APPLICATION: ${{ secrets.APPLICATION }}
         DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
         APPLICATION_DEV: ${{ secrets.APPLICATION_DEV }}
         APPLICATION_TEST: ${{ secrets.APPLICATION_TEST }}

     - name: DockerHub 로그인
       uses: docker/login-action@v2
       with:
         username: ${{ secrets.DOCKER_HUB_USERNAME }}
         password: ${{ secrets.DOCKER_HUB_TOKEN }}
     - name: Docker Image 빌드 and DockerHub Push
       uses:  docker/build-push-action@v4
       with:
         context: .
         file: ./Dockerfile
         push: true
         platforms: linux/amd64
         tags: ${{ env.DOCKER_HUB_REPOSITORY }}:latest

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: set IP
        run: |    
          STATUS=$(curl -o /dev/null -w "%{http_code}" "https://${{ secrets.LIVE_SERVER_IP }}/env"
          echo $STATUS
          if [ $STATUS = 200 ]; then
            CURRENT_UPSTREAM=$(curl -s "http://${{ secrets.LIVE_SERVER_IP }}/env")
          else
            CURRENT_UPSTREAM=green
          fi
          echo CURRENT_UPSTREAM=$CURRENT_UPSTREAM >> $GITHUB_ENV
          if [ $CURRENT_UPSTREAM = blue ]; then
            echo "CURRENT_PORT=8080" >> $GITHUB_ENV
            echo "STOPPED_PORT=8081" >> $GITHUB_ENV
            echo "TARGET_UPSTREAM=green" >> $GITHUB_ENV
          else
            echo "CURRENT_PORT=8081" >> $GITHUB_ENV
            echo "STOPPED_PORT=8080" >> $GITHUB_ENV
            echo "TARGET_UPSTREAM=blue" >> $GITHUB_ENV
          fi
      - name: Ec2 SSH 연결 Docker compose Pull
        uses: appleboy/ssh-action@master
        with:
          username: ubuntu
          host: ${{ secrets.LIVE_SERVER_IP }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script_stop: true
          script: |
            sudo docker pull ${{ secrets.DOCKER_HUB_USERNAME }}/${{ env.DOCKER_HUB_REPOSITORY }}:latest
            sudo docker-compose -f docker-compose-${{env.TARGET_UPSTREAM}}.yml up -d
      - name: deploy server URL 정상적으로 연결되는지 체크
        uses: jtalk/url-health-check-action@3
        with:
          url: http://{{ secrets.LIVE_SERVER_IP }}:${{ env.STOPPED_PORT }}/env
          max-attempts: 3
          retry-delay: 10s

      - name: change nginx upstream and stop current server
        uses: appleboy/ssh-action@master
        with:
          username: ubuntu
          host: ${{ secrets.LIVE_SERVER_IP }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script_stop: true
          script: |
            sudo docker exec -i nginxserver bash -c 'echo "set \$service_url ${{ env.TARGET_UPSTREAM }};" > /etc/nginx/conf.d/service-env.inc && nginx -s reload'
            sudo docker stop ${{env.CURRENT_UPSTREAM}}
            sudo docker rm ${{env.CURRENT_UPSTREAM}}
